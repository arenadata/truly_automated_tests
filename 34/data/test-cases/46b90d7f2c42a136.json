{
  "uid" : "46b90d7f2c42a136",
  "name" : "test_post_body_positive[file-system_POST_positive_All fields with special valid values0]",
  "fullName" : "api.test_request_body.test_post#test_post_body_positive",
  "historyId" : "55107671ab41a60843e89825d6bca0e4",
  "time" : {
    "start" : 1618399208727,
    "stop" : 1618399208789,
    "duration" : 62
  },
  "description" : "\n    Positive cases of request body testing\n    Includes sets of correct field values - boundary values, nullable and required if possible.\n    ",
  "descriptionHtml" : "<pre><code>Positive cases of request body testing\nIncludes sets of correct field values - boundary values, nullable and required if possible.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Expecting status code 201 but got 500",
  "statusTrace" : "prepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fb372bc0340>, [POST file-system and expect 201 status code. at 0x7fb372d20c10])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_positive_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_positive(prepare_post_body_data):\n        \"\"\"\n        Positive cases of request body testing\n        Includes sets of correct field values - boundary values, nullable and required if possible.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:72: in exec_request\n    status_code_should_be(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, status_code = <HTTPStatus.CREATED: 201>\n\n    @allure.step(\"Response status code should be equal {status_code}\")\n    def status_code_should_be(response: Response, status_code=HTTPStatus.OK):\n        \"\"\"Assert response status code\"\"\"\n>       assert (\n            response.status_code == status_code\n        ), f\"Expecting status code {status_code} but got {response.status_code}\"\nE       AssertionError: Expecting status code 201 but got 500\n\ntests/steps/asserts.py:16: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "app_fs",
    "time" : {
      "start" : 1618399207189,
      "stop" : 1618399208636,
      "duration" : 1447
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: local/app:vQyQyAYrOl",
      "time" : {
        "start" : 1618399207212,
        "stop" : 1618399207591,
        "duration" : 379
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_post_body_data",
    "time" : {
      "start" : 1618399208636,
      "stop" : 1618399208726,
      "duration" : 90
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Generate valid request data",
      "time" : {
        "start" : 1618399208636,
        "stop" : 1618399208725,
        "duration" : 89
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Send LIST /fs-type/",
        "time" : {
          "start" : 1618399208636,
          "stop" : 1618399208682,
          "duration" : 46
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.OK: 200>",
          "time" : {
            "start" : 1618399208682,
            "stop" : 1618399208682,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [200]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.OK: 200>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "f6a62eaf661eccbd",
          "name" : "Full request log",
          "source" : "f6a62eaf661eccbd.txt",
          "type" : "text/plain",
          "size" : 558
        } ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "Send LIST /fs-type/",
        "time" : {
          "start" : 1618399208683,
          "stop" : 1618399208725,
          "duration" : 42
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.OK: 200>",
          "time" : {
            "start" : 1618399208725,
            "stop" : 1618399208725,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [200]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.OK: 200>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "651d0e30b74d2596",
          "name" : "Full request log",
          "source" : "651d0e30b74d2596.txt",
          "type" : "text/plain",
          "size" : 558
        } ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "endpoint",
        "value" : "<Endpoints.FileSystem: Endpoint(path='file-system', methods=[<Methods.GET: Method(function=<function get at 0x7fb372f98a60>, url_template='/{name}/{id}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.LIST: Method(function=<function get at 0x7fb372f98a60>, url_template='/{name}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.POST: Method(function=<function post at 0x7fb372f98c10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>], data_class=<class 'tests.utils.data_classes.FileSystemFields'>)>"
      }, {
        "name" : "method",
        "value" : "<Methods.POST: Method(function=<function post at 0x7fb372f98c10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>"
      } ],
      "stepsCount" : 4,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "image",
    "time" : {
      "start" : 1618399181192,
      "stop" : 1618399185052,
      "duration" : 3860
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: app:refs_pull_6_merge",
      "time" : {
        "start" : 1618399181237,
        "stop" : 1618399181749,
        "duration" : 512
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "cmd_opts",
    "time" : {
      "start" : 1618399181191,
      "stop" : 1618399181192,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    Positive cases of request body testing\n    Includes sets of correct field values - boundary values, nullable and required if possible.\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Expecting status code 201 but got 500",
    "statusTrace" : "prepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fb372bc0340>, [POST file-system and expect 201 status code. at 0x7fb372d20c10])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_positive_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_positive(prepare_post_body_data):\n        \"\"\"\n        Positive cases of request body testing\n        Includes sets of correct field values - boundary values, nullable and required if possible.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:72: in exec_request\n    status_code_should_be(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, status_code = <HTTPStatus.CREATED: 201>\n\n    @allure.step(\"Response status code should be equal {status_code}\")\n    def status_code_should_be(response: Response, status_code=HTTPStatus.OK):\n        \"\"\"Assert response status code\"\"\"\n>       assert (\n            response.status_code == status_code\n        ), f\"Expecting status code {status_code} but got {response.status_code}\"\nE       AssertionError: Expecting status code 201 but got 500\n\ntests/steps/asserts.py:16: AssertionError",
    "steps" : [ {
      "name" : "Assert - All fields without body checks - Generated value: fs_type_id, description, name",
      "time" : {
        "start" : 1618399208727,
        "stop" : 1618399208789,
        "duration" : 62
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expecting status code 201 but got 500\n",
      "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/api/test_request_body/test_post.py\", line 69, in test_post_body_positive\n    app.exec_request(\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 72, in exec_request\n    status_code_should_be(\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 16, in status_code_should_be\n    assert (\n",
      "steps" : [ {
        "name" : "Send POST /file-system/",
        "time" : {
          "start" : 1618399208727,
          "stop" : 1618399208788,
          "duration" : 61
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Expecting status code 201 but got 500\n",
        "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 72, in exec_request\n    status_code_should_be(\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 16, in status_code_should_be\n    assert (\n",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.CREATED: 201>",
          "time" : {
            "start" : 1618399208788,
            "stop" : 1618399208788,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "AssertionError: Expecting status code 201 but got 500\n",
          "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 16, in status_code_should_be\n    assert (\n",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [500]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.CREATED: 201>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : true,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "3f451448175053f3",
          "name" : "Full request log",
          "source" : "3f451448175053f3.txt",
          "type" : "text/html",
          "size" : 1448
        } ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "app_fs::fin",
    "time" : {
      "start" : 1618399208799,
      "stop" : 1618399209072,
      "duration" : 273
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Gather /var/www/html/storage/app/ from APP container: de9d41b4816f56dfcf1b8db3cb90ce67837b5616571a57051f1c6a1ac06da067",
      "time" : {
        "start" : 1618399208799,
        "stop" : 1618399208876,
        "duration" : 77
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "120252b213ee4eac",
        "name" : "test_post_body_positive[file-system_POST_positive_All fields with special valid values0]_1618399208.7988734.tgz",
        "source" : "120252b213ee4eac.tgz",
        "type" : "application/gzip",
        "size" : 2851
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "image::fin",
    "time" : {
      "start" : 1618399239226,
      "stop" : 1618399239238,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Body tests"
  }, {
    "name" : "subSuite",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "API"
  }, {
    "name" : "tag",
    "value" : "positive"
  }, {
    "name" : "host",
    "value" : "fv-az246-357"
  }, {
    "name" : "thread",
    "value" : "4882-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "api.test_request_body.test_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "prepare_post_body_data",
    "value" : "[TestDataWithPreparedBody(test_data=POST file-system and expect 201 status code. at 0x7fb372d20c10, test_body={'fs_type_id': PreparedFieldValue(value=None, generated_value=True, error_messages=None, f_type=ForeignKey(_sp_vals_positive=None, _sp_vals_negative=[PreparedFieldValue(value=100, generated_value=False, error_messages=['The selected fs type id is invalid.'], f_type=..., drop_key=False), PreparedFieldValue(value=2147483648, generated_value=False, error_messages=['The selected fs type id is invalid.'], f_type=..., drop_key=False)]), drop_key=False), 'description': PreparedFieldValue(value=None, generated_value=True, error_messages=None, f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[PreparedFieldValue(value='NShXUyIoPzwQsIleeLbKDuflEHMhhVBxQbvRvgVgJNBDlQikNKqLyAAOBNlQWPqwrobVHIjrDShJIMAsjxdvTLEOXLQCwHLlDqRfnHLnDduPZJVtJKFmDelfThlEirOUExuiLKyNZrlDZXKQVAJuohCUmtMlWCRRqfotREMdCBWGbMXACEnDqJhwWRvgRpqUZxOGVcNbDxSzkXViqQDVsyeHAXmsnVEesVpiMeOwVDOQBoDxOAofUWIocfPqOTuupkEeiYzcpfYhHUjDfhXjDqmANFCApzHSXSQtCkLLcDENaPYXoOMiGZhIpngybMIlyzaxrYTqzxKYZCgOUleRAubMKXaEPPlLuzkeWsuVTchEHXBOCNvxYXQAqZRTsfdkDspbfvisEQgbUdBsNIMABKnhdSpUhPxmrOINwSFjmenKDYzHfosxPMYivYynuGwSSHiQiaOoVdFwCewmfMwtgQGwGmpYGfriwCcgRzcfubdmOVsOSYeXRlKeURaAETGRllwbVEYHuSrGewSZsiBnWjlTyLpLOojlyQaYuaqxCNyTsXYcbzKHXYnKvMdTuCJJdifSqTlRQaNRPVjNUkjRzciSbAcIcjpxsfthPGPIMjAQBxQJAfiofuuovwPiXgfPUIyswvpOAUFoXgJsRhNsbKuzvtKNssgUWDSkjhWODUpMHjjFjxPYJkIdXCatMTxlQPNEQPpYlxGMfWeqkEYbMBcNPxbCtqKcjfYncDApKyEbVhacyxTUmkvhSiQwXzSYLtoMBuytzHZzRpCjtvaPWDOKFgwITMAmRJQRsbRLKkWtvooIUEIznTXXOhPaTtzXdFgSWeQehZcSDqxVxVMQSVRvVWmeSGssuEXPHUkjBaQjLrfNCvSrXmFYbrQYkGYVgAEsHxaayumkkgEfOHuFdssAtyxgVAIZnhKjhczwFJIITwsInwzBDwaUHufOgAyIMmPtaJXEpIgIzDcglcgkwhowfVTPNGvSbJqSKBiOkubnaksGmAyVLcGHHcqaeQuEuRNVsqaGmoepwdtqDPXDwRsygDOtDoUBvAYjBFIJPPwspWpWEjvyjxVGOKbjrbOAMYXhroeFtjrwQrVrOvSFfFitDaLnBWaldZWOajFFRXdZwDTUIbvQAjxsLtJQmaBBBtjCUyvgAFWvSJQnobCdLRRajgpDyjCsbRStUXxbbREoknLPatFAySLuhnmLRAXUbrqlyjqMaXscSbScLhRngbZWccWGEFwdThoTRyNauANdZFYDKBnDmJsOzQqRXkcpNTGDxDhthQADwqKlXlmZYbuWeCCANxSJnICSvapTcGmszGVodMGackRNvcGKrYGThFcZgXhHvPtkzLcpDShqBJKmfKGVCCUpMTYmTvmfdfdIwFZNwNIXAwmhLrUESwOSMARHDSUSWDUCFozxvTaXIXduaPRHuLaOsZsZkeBPquaYnnLWDoCsepojqXykLXcQgiftwghFTJzfLZjeAgscADAVjoZzxVUbDnHFOJzaXhtCWpyZvKKRybeTopwbinhXsRCFPmwvsSgUKJXFLNQGVPpmUzFcLHYrDcOqJvpxQGWFyIYEFbGIsjZgzLPsijhAtPAhhkAZJAxIuYVKQLQWHvYHLZxiCNGHMfwlUEyCDzcXTCHTvSeFlRAENFdASHMGAafxgeSjVirUxBwQhsFkPSZaFJuyIFbDYyDTKErTEvdHozNWEXRFmuHXEunLSWTkZKTQJvqIIagevLHueosoIkJQNRMMvxcBAEdvqSDZbPbcAxHWEHvSCIZsaQzLSitpGkyBwGGVwaDZOowUrpdPOiSPDRdQImbNqYMFlRdoFOsrrwaRtNPDnVvOrwBtvKShrselNnTWZRZSqwCQRDMInjZArTOceFEArdDGuZaPGXryNVExFcpURNaTOmzLHnoemdvzKVxpFqKKrqGYCKKeKcuqUfMmrunzXnAwcxlsIFSlTgpvbZRmWoEnObdecDeYKSQUdMbntaZwlZomB', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=..., drop_key=False)]), drop_key=False), 'name': PreparedFieldValue(value='s', generated_value=False, error_messages=None, f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'XoLTaUojkuPbEfXOFZueBUlteMoVcZAnronlorjGHXRDhVotRBZwvoYhBSyBRxVlcMqtVXIYiCawKSSPumSpuPSybeyjMWkTJqvYpCYiNuqNNNARSuZnyZHGfcaoMKsyJwJjrPTRbAhvTLGYBDzEqgdlfDxUtYdnyoTNLoaxTcFoKpTJTjSGSHnvBgoBUuuQKOukPjGjhUkZFNvierHjgpiJgIqqrSpIFwNBtuNepgYGrFMNyJTKkMYWAvvMQjw'], _sp_vals_negative=[PreparedFieldValue(value='TmKATokzhFAPMzgjBXYYYMHGAAGvHebVHUTyDIesMLdOOumBqkxrWirrSpYEUDNVzemfltdjMoRAvRWANnflSpGlmYbjhJlerCYtdGUVhOepkEfhrJpLLPsNNEUGrmkaxBlKzkVAhCOPTKoybBJQnUFWQJUsyuwUWFAGHSphmoImAXhBGQRdzFGYpnaSumaKPjoIGAcmZFdJZtGcqUofUpdGGEfjgTbwrlcfdhXicgSQPVOtvADcMzNpZayIvMeq', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=..., drop_key=False)]), drop_key=False)})]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "4df89ccf997de998",
        "reportUrl" : "https://arenadata.github.io/truly_automated_tests/33//#testresult/4df89ccf997de998",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expecting status code 201 but got 500",
        "time" : {
          "start" : 1618397061419,
          "stop" : 1618397061475,
          "duration" : 56
        }
      }, {
        "uid" : "511d9731f7d810b4",
        "reportUrl" : "https://arenadata.github.io/truly_automated_tests/31//#testresult/511d9731f7d810b4",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expecting status code 201 but got 422",
        "time" : {
          "start" : 1618389406632,
          "stop" : 1618389406686,
          "duration" : 54
        }
      } ]
    },
    "tags" : [ "positive" ]
  },
  "source" : "46b90d7f2c42a136.json",
  "parameterValues" : [ "[TestDataWithPreparedBody(test_data=POST file-system and expect 201 status code. at 0x7fb372d20c10, test_body={'fs_type_id': PreparedFieldValue(value=None, generated_value=True, error_messages=None, f_type=ForeignKey(_sp_vals_positive=None, _sp_vals_negative=[PreparedFieldValue(value=100, generated_value=False, error_messages=['The selected fs type id is invalid.'], f_type=..., drop_key=False), PreparedFieldValue(value=2147483648, generated_value=False, error_messages=['The selected fs type id is invalid.'], f_type=..., drop_key=False)]), drop_key=False), 'description': PreparedFieldValue(value=None, generated_value=True, error_messages=None, f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[PreparedFieldValue(value='NShXUyIoPzwQsIleeLbKDuflEHMhhVBxQbvRvgVgJNBDlQikNKqLyAAOBNlQWPqwrobVHIjrDShJIMAsjxdvTLEOXLQCwHLlDqRfnHLnDduPZJVtJKFmDelfThlEirOUExuiLKyNZrlDZXKQVAJuohCUmtMlWCRRqfotREMdCBWGbMXACEnDqJhwWRvgRpqUZxOGVcNbDxSzkXViqQDVsyeHAXmsnVEesVpiMeOwVDOQBoDxOAofUWIocfPqOTuupkEeiYzcpfYhHUjDfhXjDqmANFCApzHSXSQtCkLLcDENaPYXoOMiGZhIpngybMIlyzaxrYTqzxKYZCgOUleRAubMKXaEPPlLuzkeWsuVTchEHXBOCNvxYXQAqZRTsfdkDspbfvisEQgbUdBsNIMABKnhdSpUhPxmrOINwSFjmenKDYzHfosxPMYivYynuGwSSHiQiaOoVdFwCewmfMwtgQGwGmpYGfriwCcgRzcfubdmOVsOSYeXRlKeURaAETGRllwbVEYHuSrGewSZsiBnWjlTyLpLOojlyQaYuaqxCNyTsXYcbzKHXYnKvMdTuCJJdifSqTlRQaNRPVjNUkjRzciSbAcIcjpxsfthPGPIMjAQBxQJAfiofuuovwPiXgfPUIyswvpOAUFoXgJsRhNsbKuzvtKNssgUWDSkjhWODUpMHjjFjxPYJkIdXCatMTxlQPNEQPpYlxGMfWeqkEYbMBcNPxbCtqKcjfYncDApKyEbVhacyxTUmkvhSiQwXzSYLtoMBuytzHZzRpCjtvaPWDOKFgwITMAmRJQRsbRLKkWtvooIUEIznTXXOhPaTtzXdFgSWeQehZcSDqxVxVMQSVRvVWmeSGssuEXPHUkjBaQjLrfNCvSrXmFYbrQYkGYVgAEsHxaayumkkgEfOHuFdssAtyxgVAIZnhKjhczwFJIITwsInwzBDwaUHufOgAyIMmPtaJXEpIgIzDcglcgkwhowfVTPNGvSbJqSKBiOkubnaksGmAyVLcGHHcqaeQuEuRNVsqaGmoepwdtqDPXDwRsygDOtDoUBvAYjBFIJPPwspWpWEjvyjxVGOKbjrbOAMYXhroeFtjrwQrVrOvSFfFitDaLnBWaldZWOajFFRXdZwDTUIbvQAjxsLtJQmaBBBtjCUyvgAFWvSJQnobCdLRRajgpDyjCsbRStUXxbbREoknLPatFAySLuhnmLRAXUbrqlyjqMaXscSbScLhRngbZWccWGEFwdThoTRyNauANdZFYDKBnDmJsOzQqRXkcpNTGDxDhthQADwqKlXlmZYbuWeCCANxSJnICSvapTcGmszGVodMGackRNvcGKrYGThFcZgXhHvPtkzLcpDShqBJKmfKGVCCUpMTYmTvmfdfdIwFZNwNIXAwmhLrUESwOSMARHDSUSWDUCFozxvTaXIXduaPRHuLaOsZsZkeBPquaYnnLWDoCsepojqXykLXcQgiftwghFTJzfLZjeAgscADAVjoZzxVUbDnHFOJzaXhtCWpyZvKKRybeTopwbinhXsRCFPmwvsSgUKJXFLNQGVPpmUzFcLHYrDcOqJvpxQGWFyIYEFbGIsjZgzLPsijhAtPAhhkAZJAxIuYVKQLQWHvYHLZxiCNGHMfwlUEyCDzcXTCHTvSeFlRAENFdASHMGAafxgeSjVirUxBwQhsFkPSZaFJuyIFbDYyDTKErTEvdHozNWEXRFmuHXEunLSWTkZKTQJvqIIagevLHueosoIkJQNRMMvxcBAEdvqSDZbPbcAxHWEHvSCIZsaQzLSitpGkyBwGGVwaDZOowUrpdPOiSPDRdQImbNqYMFlRdoFOsrrwaRtNPDnVvOrwBtvKShrselNnTWZRZSqwCQRDMInjZArTOceFEArdDGuZaPGXryNVExFcpURNaTOmzLHnoemdvzKVxpFqKKrqGYCKKeKcuqUfMmrunzXnAwcxlsIFSlTgpvbZRmWoEnObdecDeYKSQUdMbntaZwlZomB', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=..., drop_key=False)]), drop_key=False), 'name': PreparedFieldValue(value='s', generated_value=False, error_messages=None, f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'XoLTaUojkuPbEfXOFZueBUlteMoVcZAnronlorjGHXRDhVotRBZwvoYhBSyBRxVlcMqtVXIYiCawKSSPumSpuPSybeyjMWkTJqvYpCYiNuqNNNARSuZnyZHGfcaoMKsyJwJjrPTRbAhvTLGYBDzEqgdlfDxUtYdnyoTNLoaxTcFoKpTJTjSGSHnvBgoBUuuQKOukPjGjhUkZFNvierHjgpiJgIqqrSpIFwNBtuNepgYGrFMNyJTKkMYWAvvMQjw'], _sp_vals_negative=[PreparedFieldValue(value='TmKATokzhFAPMzgjBXYYYMHGAAGvHebVHUTyDIesMLdOOumBqkxrWirrSpYEUDNVzemfltdjMoRAvRWANnflSpGlmYbjhJlerCYtdGUVhOepkEfhrJpLLPsNNEUGrmkaxBlKzkVAhCOPTKoybBJQnUFWQJUsyuwUWFAGHSphmoImAXhBGQRdzFGYpnaSumaKPjoIGAcmZFdJZtGcqUofUpdGGEfjgTbwrlcfdhXicgSQPVOtvADcMzNpZayIvMeq', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=..., drop_key=False)]), drop_key=False)})]" ]
}