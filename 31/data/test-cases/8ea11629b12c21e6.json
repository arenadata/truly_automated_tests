{
  "uid" : "8ea11629b12c21e6",
  "name" : "test_post_body_negative[file-system_POST_negative_Drop fields with Required=True]",
  "fullName" : "api.test_request_body.test_post#test_post_body_negative",
  "historyId" : "cc724870b665c85e9769bda2833504a3",
  "time" : {
    "start" : 1618389421396,
    "stop" : 1618389421445,
    "duration" : 49
  },
  "description" : "\n    Negative cases of request body testing\n    Includes sets of invalid field values - out of boundary values,\n    nullable and required if not possible, fields with incorrect types etc.\n    ",
  "descriptionHtml" : "<pre><code>Negative cases of request body testing\nIncludes sets of invalid field values - out of boundary values,\nnullable and required if not possible, fields with incorrect types etc.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!",
  "statusTrace" : "response = <Response [422]>\nexpected_body = {'name': ['The name field is required.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n>           assert actual_body == expected_body, \"Response body assertion failed!\"\nE           AssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:36: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nprepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fe9f352f7f0>, [POST file-system and expect 422 status code. at 0x7fe9f36d0520])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_negative_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_negative(prepare_post_body_data):\n        \"\"\"\n        Negative cases of request body testing\n        Includes sets of invalid field values - out of boundary values,\n        nullable and required if not possible, fields with incorrect types etc.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(title=f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:77: in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\nexpected_body = {'name': ['The name field is required.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n            assert actual_body == expected_body, \"Response body assertion failed!\"\n        except AssertionError as error:\n>           raise BodyAssertionError(error) from error\nE           tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:38: BodyAssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cmd_opts",
    "time" : {
      "start" : 1618389387074,
      "stop" : 1618389387074,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_post_body_data",
    "time" : {
      "start" : 1618389421394,
      "stop" : 1618389421395,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Generate valid request data",
      "time" : {
        "start" : 1618389421394,
        "stop" : 1618389421395,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "endpoint",
        "value" : "<Endpoints.FileSystem: Endpoint(path='file-system', methods=[<Methods.GET: Method(function=<function get at 0x7fe9f396da60>, url_template='/{name}/{id}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.LIST: Method(function=<function get at 0x7fe9f396da60>, url_template='/{name}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.POST: Method(function=<function post at 0x7fe9f396dc10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>], data_class=<class 'tests.utils.data_classes.FileSystemFields'>)>"
      }, {
        "name" : "method",
        "value" : "<Methods.POST: Method(function=<function post at 0x7fe9f396dc10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "app_fs",
    "time" : {
      "start" : 1618389419919,
      "stop" : 1618389421394,
      "duration" : 1475
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: local/app:CvmizaDGct",
      "time" : {
        "start" : 1618389419934,
        "stop" : 1618389420335,
        "duration" : 401
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "image",
    "time" : {
      "start" : 1618389387074,
      "stop" : 1618389390963,
      "duration" : 3889
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: app:refs_pull_6_merge",
      "time" : {
        "start" : 1618389387119,
        "stop" : 1618389387624,
        "duration" : 505
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n    Negative cases of request body testing\n    Includes sets of invalid field values - out of boundary values,\n    nullable and required if not possible, fields with incorrect types etc.\n    ",
    "status" : "failed",
    "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!",
    "statusTrace" : "response = <Response [422]>\nexpected_body = {'name': ['The name field is required.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n>           assert actual_body == expected_body, \"Response body assertion failed!\"\nE           AssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:36: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nprepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fe9f352f7f0>, [POST file-system and expect 422 status code. at 0x7fe9f36d0520])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_negative_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_negative(prepare_post_body_data):\n        \"\"\"\n        Negative cases of request body testing\n        Includes sets of invalid field values - out of boundary values,\n        nullable and required if not possible, fields with incorrect types etc.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(title=f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:77: in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\nexpected_body = {'name': ['The name field is required.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n            assert actual_body == expected_body, \"Response body assertion failed!\"\n        except AssertionError as error:\n>           raise BodyAssertionError(error) from error\nE           tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:38: BodyAssertionError",
    "steps" : [ {
      "name" : "Assert - name: ['The name field is required.']",
      "time" : {
        "start" : 1618389421396,
        "stop" : 1618389421445,
        "duration" : 49
      },
      "status" : "failed",
      "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
      "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/api/test_request_body/test_post.py\", line 86, in test_post_body_negative\n    app.exec_request(\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 77, in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
      "steps" : [ {
        "name" : "Send POST /file-system/",
        "time" : {
          "start" : 1618389421396,
          "stop" : 1618389421445,
          "duration" : 49
        },
        "status" : "failed",
        "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
        "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 77, in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.UNPROCESSABLE_ENTITY: 422>",
          "time" : {
            "start" : 1618389421444,
            "stop" : 1618389421444,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [422]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.UNPROCESSABLE_ENTITY: 422>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        }, {
          "name" : "Response body should be",
          "time" : {
            "start" : 1618389421444,
            "stop" : 1618389421444,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
          "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "7b2368c0fd065c86",
            "name" : "Expected body",
            "source" : "7b2368c0fd065c86.json",
            "type" : "application/json",
            "size" : 53
          }, {
            "uid" : "67df0550911a8376",
            "name" : "Actual body",
            "source" : "67df0550911a8376.json",
            "type" : "application/json",
            "size" : 116
          } ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [422]>"
          }, {
            "name" : "expected_body",
            "value" : "{'name': ['The name field is required.']}"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 2,
          "shouldDisplayMessage" : true,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "ccc5598a02b4d2bf",
          "name" : "Full request log",
          "source" : "ccc5598a02b4d2bf.txt",
          "type" : "text/plain",
          "size" : 754
        } ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "app_fs::fin",
    "time" : {
      "start" : 1618389421457,
      "stop" : 1618389421750,
      "duration" : 293
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Gather /var/www/html/storage/app/ from APP container: 219fc20a7597877a0c49ba8bb1cb9580db02551e2b4d4f9d1954afa93b1ea0c9",
      "time" : {
        "start" : 1618389421457,
        "stop" : 1618389421536,
        "duration" : 79
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "525f649cfb7de38e",
        "name" : "test_post_body_negative[file-system_POST_negative_Drop fields with Required=True]_1618389421.4574594.tgz",
        "source" : "525f649cfb7de38e.tgz",
        "type" : "application/gzip",
        "size" : 1192
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "image::fin",
    "time" : {
      "start" : 1618389425588,
      "stop" : 1618389425599,
      "duration" : 11
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Body tests"
  }, {
    "name" : "parentSuite",
    "value" : "API"
  }, {
    "name" : "subSuite",
    "value" : "POST"
  }, {
    "name" : "tag",
    "value" : "negative"
  }, {
    "name" : "host",
    "value" : "fv-az252-672"
  }, {
    "name" : "thread",
    "value" : "4923-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "api.test_request_body.test_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "prepare_post_body_data",
    "value" : "[TestDataWithPreparedBody(test_data=POST file-system and expect 422 status code. at 0x7fe9f36d0520, test_body={'name': PreparedFieldValue(value=None, generated_value=False, error_messages=['The name field is required.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'UPoysooRdCjKRgqlYLqUdUvuycmRueYbblEsqiCHkeMUJKqLNiaczLYnqAvekoEeNbPBywleNAxHWNSDNDdRxMCCXaRhZVDggHxiZqYbbmEiLJhQrBQERomNtmMhCbHwhVPFsMraYnrVlANFYoEbbFAIAQXaWAHeIrSgbdieyhlhEfSDegMLprYyuRLOADniRmiOQXoaVEMLzjxGPwSWqPkKopbnvyFqaejAakSwyQRLfEjJjAqQjSBMQNprOJG'], _sp_vals_negative=[PreparedFieldValue(value='FajLZvaeMIbrKXwEfnUxUcYGaVUqqGXFiiQhDBvNcbtwBrsCPvyGFUtmYIAwahLaQbBgcLSvbebocjdAmqKNwDDtEvNxDJzcfYaHHsJRMWqPABGNkPPadXKjfhJllCoLSFLBmRDYreKJfWNHCVrHVWkIXdtERNBnDSuBgOtrHmQJuOjVdNwGBcKXCGBemhRnTbwLbKPiWcTmlsKwXPSEVdiyGuwWapIbVyDlYqEFglVZtmFNkJKTWUSUuEDAyOnY', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=..., drop_key=False)]), drop_key=True)})]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "negative" ]
  },
  "source" : "8ea11629b12c21e6.json",
  "parameterValues" : [ "[TestDataWithPreparedBody(test_data=POST file-system and expect 422 status code. at 0x7fe9f36d0520, test_body={'name': PreparedFieldValue(value=None, generated_value=False, error_messages=['The name field is required.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'UPoysooRdCjKRgqlYLqUdUvuycmRueYbblEsqiCHkeMUJKqLNiaczLYnqAvekoEeNbPBywleNAxHWNSDNDdRxMCCXaRhZVDggHxiZqYbbmEiLJhQrBQERomNtmMhCbHwhVPFsMraYnrVlANFYoEbbFAIAQXaWAHeIrSgbdieyhlhEfSDegMLprYyuRLOADniRmiOQXoaVEMLzjxGPwSWqPkKopbnvyFqaejAakSwyQRLfEjJjAqQjSBMQNprOJG'], _sp_vals_negative=[PreparedFieldValue(value='FajLZvaeMIbrKXwEfnUxUcYGaVUqqGXFiiQhDBvNcbtwBrsCPvyGFUtmYIAwahLaQbBgcLSvbebocjdAmqKNwDDtEvNxDJzcfYaHHsJRMWqPABGNkPPadXKjfhJllCoLSFLBmRDYreKJfWNHCVrHVWkIXdtERNBnDSuBgOtrHmQJuOjVdNwGBcKXCGBemhRnTbwLbKPiWcTmlsKwXPSEVdiyGuwWapIbVyDlYqEFglVZtmFNkJKTWUSUuEDAyOnY', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=..., drop_key=False)]), drop_key=True)})]" ]
}