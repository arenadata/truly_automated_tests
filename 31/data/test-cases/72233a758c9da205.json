{
  "uid" : "72233a758c9da205",
  "name" : "test_post_body_negative[cluster_POST_negative_Invalid field types and values]",
  "fullName" : "api.test_request_body.test_post#test_post_body_negative",
  "historyId" : "9eed0a2ec490d3cd939827a17adbcc8a",
  "time" : {
    "start" : 1618389420540,
    "stop" : 1618389420639,
    "duration" : 99
  },
  "description" : "\n    Negative cases of request body testing\n    Includes sets of invalid field values - out of boundary values,\n    nullable and required if not possible, fields with incorrect types etc.\n    ",
  "descriptionHtml" : "<pre><code>Negative cases of request body testing\nIncludes sets of invalid field values - out of boundary values,\nnullable and required if not possible, fields with incorrect types etc.\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!",
  "statusTrace" : "response = <Response [422]>\nexpected_body = {'description': ['The description may not be greater than 2000 characters.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n>           assert actual_body == expected_body, \"Response body assertion failed!\"\nE           AssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:36: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nprepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fd2f41ea5b0>, [POST cluster and expect 422 status code. at 0x7fd2f439773...OST cluster and expect 422 status code. at 0x7fd2f4397850, POST cluster and expect 422 status code. at 0x7fd2f4397940])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_negative_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_negative(prepare_post_body_data):\n        \"\"\"\n        Negative cases of request body testing\n        Includes sets of invalid field values - out of boundary values,\n        nullable and required if not possible, fields with incorrect types etc.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(title=f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:77: in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\nexpected_body = {'description': ['The description may not be greater than 2000 characters.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n            assert actual_body == expected_body, \"Response body assertion failed!\"\n        except AssertionError as error:\n>           raise BodyAssertionError(error) from error\nE           tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:38: BodyAssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "prepare_post_body_data",
    "time" : {
      "start" : 1618389420538,
      "stop" : 1618389420539,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Generate valid request data",
      "time" : {
        "start" : 1618389420539,
        "stop" : 1618389420539,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "endpoint",
        "value" : "<Endpoints.Cluster: Endpoint(path='cluster', methods=[<Methods.GET: Method(function=<function get at 0x7fd2f4605a60>, url_template='/{name}/{id}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.LIST: Method(function=<function get at 0x7fd2f4605a60>, url_template='/{name}/', default_success_code=<HTTPStatus.OK: 200>)>, <Methods.POST: Method(function=<function post at 0x7fd2f4605c10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>], data_class=<class 'tests.utils.data_classes.ClusterFields'>)>"
      }, {
        "name" : "method",
        "value" : "<Methods.POST: Method(function=<function post at 0x7fd2f4605c10>, url_template='/{name}/', default_success_code=<HTTPStatus.CREATED: 201>)>"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "app_fs",
    "time" : {
      "start" : 1618389419100,
      "stop" : 1618389420538,
      "duration" : 1438
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: local/app:BapDGBzpjC",
      "time" : {
        "start" : 1618389419115,
        "stop" : 1618389419492,
        "duration" : 377
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "cmd_opts",
    "time" : {
      "start" : 1618389387072,
      "stop" : 1618389387072,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "image",
    "time" : {
      "start" : 1618389387072,
      "stop" : 1618389391106,
      "duration" : 4034
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Run container: app:refs_pull_6_merge",
      "time" : {
        "start" : 1618389387117,
        "stop" : 1618389387769,
        "duration" : 652
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "\n    Negative cases of request body testing\n    Includes sets of invalid field values - out of boundary values,\n    nullable and required if not possible, fields with incorrect types etc.\n    ",
    "status" : "failed",
    "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!",
    "statusTrace" : "response = <Response [422]>\nexpected_body = {'description': ['The description may not be greater than 2000 characters.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n>           assert actual_body == expected_body, \"Response body assertion failed!\"\nE           AssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:36: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nprepare_post_body_data = (<tests.utils.api_objects.APPApi object at 0x7fd2f41ea5b0>, [POST cluster and expect 422 status code. at 0x7fd2f439773...OST cluster and expect 422 status code. at 0x7fd2f4397850, POST cluster and expect 422 status code. at 0x7fd2f4397940])\n\n    @pytest.mark.parametrize(\n        \"prepare_post_body_data\", get_negative_data_for_post_body_check(), indirect=True\n    )\n    def test_post_body_negative(prepare_post_body_data):\n        \"\"\"\n        Negative cases of request body testing\n        Includes sets of invalid field values - out of boundary values,\n        nullable and required if not possible, fields with incorrect types etc.\n        \"\"\"\n        app, test_data_list = prepare_post_body_data\n        for test_data in test_data_list:\n            with allure.step(title=f\"Assert - {test_data.description}\"):\n>               app.exec_request(\n                    request=test_data.request, expected_response=test_data.response\n                )\n\ntests/api/test_request_body/test_post.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/api_objects.py:77: in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\nexpected_body = {'description': ['The description may not be greater than 2000 characters.']}\n\n    @allure.step(\"Response body should be\")\n    def body_should_be(response: Response, expected_body=None):\n        \"\"\"Assert response body and attach it\"\"\"\n        actual_body = response.json()\n        allure.attach(\n            json.dumps(expected_body, indent=2),\n            name=\"Expected body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        allure.attach(\n            json.dumps(actual_body, indent=2),\n            name=\"Actual body\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        try:\n            assert actual_body == expected_body, \"Response body assertion failed!\"\n        except AssertionError as error:\n>           raise BodyAssertionError(error) from error\nE           tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n\ntests/steps/asserts.py:38: BodyAssertionError",
    "steps" : [ {
      "name" : "Assert - All fields without body checks - Special values: description, name",
      "time" : {
        "start" : 1618389420540,
        "stop" : 1618389420586,
        "duration" : 46
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Send POST /cluster/",
        "time" : {
          "start" : 1618389420540,
          "stop" : 1618389420586,
          "duration" : 46
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.UNPROCESSABLE_ENTITY: 422>",
          "time" : {
            "start" : 1618389420586,
            "stop" : 1618389420586,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [422]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.UNPROCESSABLE_ENTITY: 422>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "a3df57aee629465d",
          "name" : "Full request log",
          "source" : "a3df57aee629465d.txt",
          "type" : "text/plain",
          "size" : 3009
        } ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert - description: ['The description may not be greater than 2000 characters.']",
      "time" : {
        "start" : 1618389420586,
        "stop" : 1618389420639,
        "duration" : 53
      },
      "status" : "failed",
      "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
      "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/api/test_request_body/test_post.py\", line 86, in test_post_body_negative\n    app.exec_request(\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 77, in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
      "steps" : [ {
        "name" : "Send POST /cluster/",
        "time" : {
          "start" : 1618389420586,
          "stop" : 1618389420639,
          "duration" : 53
        },
        "status" : "failed",
        "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
        "statusTrace" : "  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/utils/api_objects.py\", line 77, in exec_request\n    body_should_be(response=response, expected_body=expected_response.body)\n  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
        "steps" : [ {
          "name" : "Response status code should be equal <HTTPStatus.UNPROCESSABLE_ENTITY: 422>",
          "time" : {
            "start" : 1618389420638,
            "stop" : 1618389420638,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [422]>"
          }, {
            "name" : "status_code",
            "value" : "<HTTPStatus.UNPROCESSABLE_ENTITY: 422>"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        }, {
          "name" : "Response body should be",
          "time" : {
            "start" : 1618389420638,
            "stop" : 1618389420638,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "tests.steps.asserts.BodyAssertionError: Response body assertion failed!\n",
          "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.4/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/truly_automated_tests/truly_automated_tests/tests/steps/asserts.py\", line 38, in body_should_be\n    raise BodyAssertionError(error) from error\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "7810ed04106241b2",
            "name" : "Expected body",
            "source" : "7810ed04106241b2.json",
            "type" : "application/json",
            "size" : 89
          }, {
            "uid" : "f34dbd6aeb9cad4b",
            "name" : "Actual body",
            "source" : "f34dbd6aeb9cad4b.json",
            "type" : "application/json",
            "size" : 162
          } ],
          "parameters" : [ {
            "name" : "response",
            "value" : "<Response [422]>"
          }, {
            "name" : "expected_body",
            "value" : "{'description': ['The description may not be greater than 2000 characters.']}"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 2,
          "shouldDisplayMessage" : true,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "8c482a941cb7a07e",
          "name" : "Full request log",
          "source" : "8c482a941cb7a07e.txt",
          "type" : "text/plain",
          "size" : 2922
        } ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "app_fs::fin",
    "time" : {
      "start" : 1618389420648,
      "stop" : 1618389420946,
      "duration" : 298
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Gather /var/www/html/storage/app/ from APP container: 12e513ae3bd818fce55356204e51f59a42fcc1b3317e459a8726a1d0f8c9652e",
      "time" : {
        "start" : 1618389420648,
        "stop" : 1618389420716,
        "duration" : 68
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6daf04776f758963",
        "name" : "test_post_body_negative[cluster_POST_negative_Invalid field types and values]_1618389420.6481493.tgz",
        "source" : "6daf04776f758963.tgz",
        "type" : "application/gzip",
        "size" : 1192
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "image::fin",
    "time" : {
      "start" : 1618389426648,
      "stop" : 1618389426659,
      "duration" : 11
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "API"
  }, {
    "name" : "subSuite",
    "value" : "POST"
  }, {
    "name" : "suite",
    "value" : "Body tests"
  }, {
    "name" : "tag",
    "value" : "negative"
  }, {
    "name" : "host",
    "value" : "fv-az252-672"
  }, {
    "name" : "thread",
    "value" : "4926-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "api.test_request_body.test_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "prepare_post_body_data",
    "value" : "[TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397730, test_body={'description': PreparedFieldValue(value='YCKvYykegUJEEoTGBFeLUhirFMzznauuBmpEwPcchMKnCEPwoYfcTaEbBwxSToiEVuhsodunVqxjSpdtygplzXyAclwOnMCOHhUDKrtYdTYmiqhVbayUnZUdknUcSutTxGkXZoJZKtXxNTawufFCHjYWylIrjlKeMifCEyLMAzEzMFAlCUlDhNjbihWwrBgxSjoJssGCjMaxQKQNaYQiaCWATqXznviOuYRolbAlknQoPaRPgacCNDRFWEgkNzZhgvJKkmycDgXeywVbqPiPLHwjLEWJHXNrFKVHeJlaRnPDGbrtlvTwTPPkkPBNsdUrXTBbuWCDyclfcwvjyXptliwjoPcwOGtRkWiSAoTWAjyNUCnzfajlqukgDjuRRYBILpvpnCUGBSmhjWgptjRHIczRBVgwBieyKhMXrvzYNHYICRDELGxTxqewwyuAwppVcUdTIVOkZytGntGAnwEULjmLGRsaJmvHMYtgzDjumRCEoCoZzsfsdRsqISyngIhZHRrYNPDvimJlnoXDFNWENNpgysdCYOsDXfWtzUeCMQkzearfgmWwoIFnUOnJjqxgHRNCyKUXQXmAqNSqVzlaWaThIAKuyRJSobfhDlxJGtSFphWwTeSnBvyLnqtOGTenMklUpvtqGhoGMxrvVqROAMRNYXoqJdKCMvnXLFgwTfKPKKblCmSpzGMuMTIYEesSJlioWBmfkUZjwMWeIpcNgTDDaHjCjstAfEjEMDLHZVeMzmWcvAjBdirmzqTRLJAITkvLDBMsDBiaopNbKfemEcBfywgUbauobPIsmwnCsOBuFHuAmjvwiOgrFQPOAjckuoXnXtKCJzgRyBVqzBKNrZEoOaQGuTpFnxXKxlizxMLDVSMhJhZjnbwkclgEkVbfiYubpaiztQCJzymFpUxtZwIMrOlqeVidLEOZnFdGkzPdTLUXgIlWGPysArsfbSjBBrLENDkXizUqESVqbyNWFpEhLSkjjIYKwwpUhGSlpcaeovTgZlSBmEQZfLExovhyzfmouFMDQlrKMqHuYVChwltWgvHRdwwvefWnLWjuCcjBQspOSqxZNTJJrwmNIEqtEhEgulQJuCvjEdfgNveOyZeVCidcjbwfwKGnSjODLIYlKTWoXfdFbLCBpIsZQGFoWtYpMaDMSmDhjzsKuZFdrTgIcHjrhWNzvZZSAoMCUTYBpfnCvtOhmtDkzwAHTvcrEkMRdsaipXztecatddkYAHoeLHUIQMMuQQnhIqUuKwWllPbSOutxTZRjxHEtJRxVblXnGnSYDrogZLohzBiZzoJXvDYmgtiOLeLHYoCKHztHmpNjWHyqdJTaGEclvGtfQBtmGSVelcayoYpRUIYopNcaPfIemqCyBMoTAqNDsdhYNpXFPCCPQltXHNyEQSxClPARyBHANRgLPWMXGRyknUKCGgbDLusWeUcAdnZVTeYszEOpWgjIHCaanfaPBRPQabITHURDoxJiyKEjVovNgxXeTTslEsMLcFxjCLzMMQbLgTrVvMkHReUZneAIXKGhGzURvrTqowWWYjBeFyTfriZCqFBbBevdJVyODhpMmDpNJvpztmJSCRupnjmhypLcspJQdCJOWiMxCWvMcjBGbKAUQPouhpBEYQhTGqdtYkXrSyOpuwHNlCfmdobSjVzkoxbcUlkhdRETdPhdiwsJYAMmQcntkTdwoEKiWPLfXJHdYntDodOjRPXDLGfnHcJvUTOETuPowLOfbVDidOphnhgQzWIrsqqMesXARobRBsLQrrwqdlBilRusGdWbdfUgtdIrHlNCbSMsWWcPbKShtmPizfgtTHCYmxFejdkVnKIbmacJtBXUffVdtYZLbgJGmKYMHxSfIYiivYQITuOjYqMlyBWkXVYiIQkVpPpVDlWtoCmnGWebHbERhKrUpSihidLYgYmELplPfXQOpgtGTqkulZFngrXxCrGzJxDIPzEVBzcGVCWLLbqFsVdGKykMkUIGVCJhgbwFxGhpy', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[...]), drop_key=False), 'name': PreparedFieldValue(value='khdUpXrQdPPfosGeaSRxtzEyvyrWoARUbNChzZssAwUNSncjrZOkAzSvELNFnawzHOkuExIefNefVVCzEkccVvFSoaQraIWgnveWgKybZPXholRHpJUdKVkpdRtiCXMhdOkbpNIEFXFVINPZlBERNXzzBAQjNStYInQjGeWiiykjLHyEBJCKrcsMVkjtbTGkGLYufBvjfjAAJkhUBiDEFgLWHgZFrWWfgapCcAaDVOnymMiQMNfiNfdCrQldHhez', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'KiPZmhuSimKxrYWFAdAkTXbjGgdyCUROyGriLPdLiBVNVtOXNMjrnuLUnnYHvotPLdpHfrztwVjAbxQbSWZTaFnQtFQLrCihOyQCYtYWIuAFLVAKYBtGiqEdUzuNjDTORruDkxQQNRzjcFGmoCNAeCvBMFdVugqiprjMqSxwXZthSZMPxSlPhaiuhiOqJetafmDijzOrsqQKDSLgFiwoQJNljCPfWUiVUlTAEWiuXsoAjQFHQsXUuzbHsgWoyAS'], _sp_vals_negative=[...]), drop_key=False)}), TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397850, test_body={'description': PreparedFieldValue(value='YCKvYykegUJEEoTGBFeLUhirFMzznauuBmpEwPcchMKnCEPwoYfcTaEbBwxSToiEVuhsodunVqxjSpdtygplzXyAclwOnMCOHhUDKrtYdTYmiqhVbayUnZUdknUcSutTxGkXZoJZKtXxNTawufFCHjYWylIrjlKeMifCEyLMAzEzMFAlCUlDhNjbihWwrBgxSjoJssGCjMaxQKQNaYQiaCWATqXznviOuYRolbAlknQoPaRPgacCNDRFWEgkNzZhgvJKkmycDgXeywVbqPiPLHwjLEWJHXNrFKVHeJlaRnPDGbrtlvTwTPPkkPBNsdUrXTBbuWCDyclfcwvjyXptliwjoPcwOGtRkWiSAoTWAjyNUCnzfajlqukgDjuRRYBILpvpnCUGBSmhjWgptjRHIczRBVgwBieyKhMXrvzYNHYICRDELGxTxqewwyuAwppVcUdTIVOkZytGntGAnwEULjmLGRsaJmvHMYtgzDjumRCEoCoZzsfsdRsqISyngIhZHRrYNPDvimJlnoXDFNWENNpgysdCYOsDXfWtzUeCMQkzearfgmWwoIFnUOnJjqxgHRNCyKUXQXmAqNSqVzlaWaThIAKuyRJSobfhDlxJGtSFphWwTeSnBvyLnqtOGTenMklUpvtqGhoGMxrvVqROAMRNYXoqJdKCMvnXLFgwTfKPKKblCmSpzGMuMTIYEesSJlioWBmfkUZjwMWeIpcNgTDDaHjCjstAfEjEMDLHZVeMzmWcvAjBdirmzqTRLJAITkvLDBMsDBiaopNbKfemEcBfywgUbauobPIsmwnCsOBuFHuAmjvwiOgrFQPOAjckuoXnXtKCJzgRyBVqzBKNrZEoOaQGuTpFnxXKxlizxMLDVSMhJhZjnbwkclgEkVbfiYubpaiztQCJzymFpUxtZwIMrOlqeVidLEOZnFdGkzPdTLUXgIlWGPysArsfbSjBBrLENDkXizUqESVqbyNWFpEhLSkjjIYKwwpUhGSlpcaeovTgZlSBmEQZfLExovhyzfmouFMDQlrKMqHuYVChwltWgvHRdwwvefWnLWjuCcjBQspOSqxZNTJJrwmNIEqtEhEgulQJuCvjEdfgNveOyZeVCidcjbwfwKGnSjODLIYlKTWoXfdFbLCBpIsZQGFoWtYpMaDMSmDhjzsKuZFdrTgIcHjrhWNzvZZSAoMCUTYBpfnCvtOhmtDkzwAHTvcrEkMRdsaipXztecatddkYAHoeLHUIQMMuQQnhIqUuKwWllPbSOutxTZRjxHEtJRxVblXnGnSYDrogZLohzBiZzoJXvDYmgtiOLeLHYoCKHztHmpNjWHyqdJTaGEclvGtfQBtmGSVelcayoYpRUIYopNcaPfIemqCyBMoTAqNDsdhYNpXFPCCPQltXHNyEQSxClPARyBHANRgLPWMXGRyknUKCGgbDLusWeUcAdnZVTeYszEOpWgjIHCaanfaPBRPQabITHURDoxJiyKEjVovNgxXeTTslEsMLcFxjCLzMMQbLgTrVvMkHReUZneAIXKGhGzURvrTqowWWYjBeFyTfriZCqFBbBevdJVyODhpMmDpNJvpztmJSCRupnjmhypLcspJQdCJOWiMxCWvMcjBGbKAUQPouhpBEYQhTGqdtYkXrSyOpuwHNlCfmdobSjVzkoxbcUlkhdRETdPhdiwsJYAMmQcntkTdwoEKiWPLfXJHdYntDodOjRPXDLGfnHcJvUTOETuPowLOfbVDidOphnhgQzWIrsqqMesXARobRBsLQrrwqdlBilRusGdWbdfUgtdIrHlNCbSMsWWcPbKShtmPizfgtTHCYmxFejdkVnKIbmacJtBXUffVdtYZLbgJGmKYMHxSfIYiivYQITuOjYqMlyBWkXVYiIQkVpPpVDlWtoCmnGWebHbERhKrUpSihidLYgYmELplPfXQOpgtGTqkulZFngrXxCrGzJxDIPzEVBzcGVCWLLbqFsVdGKykMkUIGVCJhgbwFxGhpy', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[...]), drop_key=False)}), TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397940, test_body={'name': PreparedFieldValue(value='khdUpXrQdPPfosGeaSRxtzEyvyrWoARUbNChzZssAwUNSncjrZOkAzSvELNFnawzHOkuExIefNefVVCzEkccVvFSoaQraIWgnveWgKybZPXholRHpJUdKVkpdRtiCXMhdOkbpNIEFXFVINPZlBERNXzzBAQjNStYInQjGeWiiykjLHyEBJCKrcsMVkjtbTGkGLYufBvjfjAAJkhUBiDEFgLWHgZFrWWfgapCcAaDVOnymMiQMNfiNfdCrQldHhez', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'KiPZmhuSimKxrYWFAdAkTXbjGgdyCUROyGriLPdLiBVNVtOXNMjrnuLUnnYHvotPLdpHfrztwVjAbxQbSWZTaFnQtFQLrCihOyQCYtYWIuAFLVAKYBtGiqEdUzuNjDTORruDkxQQNRzjcFGmoCNAeCvBMFdVugqiprjMqSxwXZthSZMPxSlPhaiuhiOqJetafmDijzOrsqQKDSLgFiwoQJNljCPfWUiVUlTAEWiuXsoAjQFHQsXUuzbHsgWoyAS'], _sp_vals_negative=[...]), drop_key=False)})]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "negative" ]
  },
  "source" : "72233a758c9da205.json",
  "parameterValues" : [ "[TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397730, test_body={'description': PreparedFieldValue(value='YCKvYykegUJEEoTGBFeLUhirFMzznauuBmpEwPcchMKnCEPwoYfcTaEbBwxSToiEVuhsodunVqxjSpdtygplzXyAclwOnMCOHhUDKrtYdTYmiqhVbayUnZUdknUcSutTxGkXZoJZKtXxNTawufFCHjYWylIrjlKeMifCEyLMAzEzMFAlCUlDhNjbihWwrBgxSjoJssGCjMaxQKQNaYQiaCWATqXznviOuYRolbAlknQoPaRPgacCNDRFWEgkNzZhgvJKkmycDgXeywVbqPiPLHwjLEWJHXNrFKVHeJlaRnPDGbrtlvTwTPPkkPBNsdUrXTBbuWCDyclfcwvjyXptliwjoPcwOGtRkWiSAoTWAjyNUCnzfajlqukgDjuRRYBILpvpnCUGBSmhjWgptjRHIczRBVgwBieyKhMXrvzYNHYICRDELGxTxqewwyuAwppVcUdTIVOkZytGntGAnwEULjmLGRsaJmvHMYtgzDjumRCEoCoZzsfsdRsqISyngIhZHRrYNPDvimJlnoXDFNWENNpgysdCYOsDXfWtzUeCMQkzearfgmWwoIFnUOnJjqxgHRNCyKUXQXmAqNSqVzlaWaThIAKuyRJSobfhDlxJGtSFphWwTeSnBvyLnqtOGTenMklUpvtqGhoGMxrvVqROAMRNYXoqJdKCMvnXLFgwTfKPKKblCmSpzGMuMTIYEesSJlioWBmfkUZjwMWeIpcNgTDDaHjCjstAfEjEMDLHZVeMzmWcvAjBdirmzqTRLJAITkvLDBMsDBiaopNbKfemEcBfywgUbauobPIsmwnCsOBuFHuAmjvwiOgrFQPOAjckuoXnXtKCJzgRyBVqzBKNrZEoOaQGuTpFnxXKxlizxMLDVSMhJhZjnbwkclgEkVbfiYubpaiztQCJzymFpUxtZwIMrOlqeVidLEOZnFdGkzPdTLUXgIlWGPysArsfbSjBBrLENDkXizUqESVqbyNWFpEhLSkjjIYKwwpUhGSlpcaeovTgZlSBmEQZfLExovhyzfmouFMDQlrKMqHuYVChwltWgvHRdwwvefWnLWjuCcjBQspOSqxZNTJJrwmNIEqtEhEgulQJuCvjEdfgNveOyZeVCidcjbwfwKGnSjODLIYlKTWoXfdFbLCBpIsZQGFoWtYpMaDMSmDhjzsKuZFdrTgIcHjrhWNzvZZSAoMCUTYBpfnCvtOhmtDkzwAHTvcrEkMRdsaipXztecatddkYAHoeLHUIQMMuQQnhIqUuKwWllPbSOutxTZRjxHEtJRxVblXnGnSYDrogZLohzBiZzoJXvDYmgtiOLeLHYoCKHztHmpNjWHyqdJTaGEclvGtfQBtmGSVelcayoYpRUIYopNcaPfIemqCyBMoTAqNDsdhYNpXFPCCPQltXHNyEQSxClPARyBHANRgLPWMXGRyknUKCGgbDLusWeUcAdnZVTeYszEOpWgjIHCaanfaPBRPQabITHURDoxJiyKEjVovNgxXeTTslEsMLcFxjCLzMMQbLgTrVvMkHReUZneAIXKGhGzURvrTqowWWYjBeFyTfriZCqFBbBevdJVyODhpMmDpNJvpztmJSCRupnjmhypLcspJQdCJOWiMxCWvMcjBGbKAUQPouhpBEYQhTGqdtYkXrSyOpuwHNlCfmdobSjVzkoxbcUlkhdRETdPhdiwsJYAMmQcntkTdwoEKiWPLfXJHdYntDodOjRPXDLGfnHcJvUTOETuPowLOfbVDidOphnhgQzWIrsqqMesXARobRBsLQrrwqdlBilRusGdWbdfUgtdIrHlNCbSMsWWcPbKShtmPizfgtTHCYmxFejdkVnKIbmacJtBXUffVdtYZLbgJGmKYMHxSfIYiivYQITuOjYqMlyBWkXVYiIQkVpPpVDlWtoCmnGWebHbERhKrUpSihidLYgYmELplPfXQOpgtGTqkulZFngrXxCrGzJxDIPzEVBzcGVCWLLbqFsVdGKykMkUIGVCJhgbwFxGhpy', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[...]), drop_key=False), 'name': PreparedFieldValue(value='khdUpXrQdPPfosGeaSRxtzEyvyrWoARUbNChzZssAwUNSncjrZOkAzSvELNFnawzHOkuExIefNefVVCzEkccVvFSoaQraIWgnveWgKybZPXholRHpJUdKVkpdRtiCXMhdOkbpNIEFXFVINPZlBERNXzzBAQjNStYInQjGeWiiykjLHyEBJCKrcsMVkjtbTGkGLYufBvjfjAAJkhUBiDEFgLWHgZFrWWfgapCcAaDVOnymMiQMNfiNfdCrQldHhez', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'KiPZmhuSimKxrYWFAdAkTXbjGgdyCUROyGriLPdLiBVNVtOXNMjrnuLUnnYHvotPLdpHfrztwVjAbxQbSWZTaFnQtFQLrCihOyQCYtYWIuAFLVAKYBtGiqEdUzuNjDTORruDkxQQNRzjcFGmoCNAeCvBMFdVugqiprjMqSxwXZthSZMPxSlPhaiuhiOqJetafmDijzOrsqQKDSLgFiwoQJNljCPfWUiVUlTAEWiuXsoAjQFHQsXUuzbHsgWoyAS'], _sp_vals_negative=[...]), drop_key=False)}), TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397850, test_body={'description': PreparedFieldValue(value='YCKvYykegUJEEoTGBFeLUhirFMzznauuBmpEwPcchMKnCEPwoYfcTaEbBwxSToiEVuhsodunVqxjSpdtygplzXyAclwOnMCOHhUDKrtYdTYmiqhVbayUnZUdknUcSutTxGkXZoJZKtXxNTawufFCHjYWylIrjlKeMifCEyLMAzEzMFAlCUlDhNjbihWwrBgxSjoJssGCjMaxQKQNaYQiaCWATqXznviOuYRolbAlknQoPaRPgacCNDRFWEgkNzZhgvJKkmycDgXeywVbqPiPLHwjLEWJHXNrFKVHeJlaRnPDGbrtlvTwTPPkkPBNsdUrXTBbuWCDyclfcwvjyXptliwjoPcwOGtRkWiSAoTWAjyNUCnzfajlqukgDjuRRYBILpvpnCUGBSmhjWgptjRHIczRBVgwBieyKhMXrvzYNHYICRDELGxTxqewwyuAwppVcUdTIVOkZytGntGAnwEULjmLGRsaJmvHMYtgzDjumRCEoCoZzsfsdRsqISyngIhZHRrYNPDvimJlnoXDFNWENNpgysdCYOsDXfWtzUeCMQkzearfgmWwoIFnUOnJjqxgHRNCyKUXQXmAqNSqVzlaWaThIAKuyRJSobfhDlxJGtSFphWwTeSnBvyLnqtOGTenMklUpvtqGhoGMxrvVqROAMRNYXoqJdKCMvnXLFgwTfKPKKblCmSpzGMuMTIYEesSJlioWBmfkUZjwMWeIpcNgTDDaHjCjstAfEjEMDLHZVeMzmWcvAjBdirmzqTRLJAITkvLDBMsDBiaopNbKfemEcBfywgUbauobPIsmwnCsOBuFHuAmjvwiOgrFQPOAjckuoXnXtKCJzgRyBVqzBKNrZEoOaQGuTpFnxXKxlizxMLDVSMhJhZjnbwkclgEkVbfiYubpaiztQCJzymFpUxtZwIMrOlqeVidLEOZnFdGkzPdTLUXgIlWGPysArsfbSjBBrLENDkXizUqESVqbyNWFpEhLSkjjIYKwwpUhGSlpcaeovTgZlSBmEQZfLExovhyzfmouFMDQlrKMqHuYVChwltWgvHRdwwvefWnLWjuCcjBQspOSqxZNTJJrwmNIEqtEhEgulQJuCvjEdfgNveOyZeVCidcjbwfwKGnSjODLIYlKTWoXfdFbLCBpIsZQGFoWtYpMaDMSmDhjzsKuZFdrTgIcHjrhWNzvZZSAoMCUTYBpfnCvtOhmtDkzwAHTvcrEkMRdsaipXztecatddkYAHoeLHUIQMMuQQnhIqUuKwWllPbSOutxTZRjxHEtJRxVblXnGnSYDrogZLohzBiZzoJXvDYmgtiOLeLHYoCKHztHmpNjWHyqdJTaGEclvGtfQBtmGSVelcayoYpRUIYopNcaPfIemqCyBMoTAqNDsdhYNpXFPCCPQltXHNyEQSxClPARyBHANRgLPWMXGRyknUKCGgbDLusWeUcAdnZVTeYszEOpWgjIHCaanfaPBRPQabITHURDoxJiyKEjVovNgxXeTTslEsMLcFxjCLzMMQbLgTrVvMkHReUZneAIXKGhGzURvrTqowWWYjBeFyTfriZCqFBbBevdJVyODhpMmDpNJvpztmJSCRupnjmhypLcspJQdCJOWiMxCWvMcjBGbKAUQPouhpBEYQhTGqdtYkXrSyOpuwHNlCfmdobSjVzkoxbcUlkhdRETdPhdiwsJYAMmQcntkTdwoEKiWPLfXJHdYntDodOjRPXDLGfnHcJvUTOETuPowLOfbVDidOphnhgQzWIrsqqMesXARobRBsLQrrwqdlBilRusGdWbdfUgtdIrHlNCbSMsWWcPbKShtmPizfgtTHCYmxFejdkVnKIbmacJtBXUffVdtYZLbgJGmKYMHxSfIYiivYQITuOjYqMlyBWkXVYiIQkVpPpVDlWtoCmnGWebHbERhKrUpSihidLYgYmELplPfXQOpgtGTqkulZFngrXxCrGzJxDIPzEVBzcGVCWLLbqFsVdGKykMkUIGVCJhgbwFxGhpy', generated_value=False, error_messages=['The description may not be greater than 2000 characters.'], f_type=Text(_sp_vals_positive=None, _sp_vals_negative=[...]), drop_key=False)}), TestDataWithPreparedBody(test_data=POST cluster and expect 422 status code. at 0x7fd2f4397940, test_body={'name': PreparedFieldValue(value='khdUpXrQdPPfosGeaSRxtzEyvyrWoARUbNChzZssAwUNSncjrZOkAzSvELNFnawzHOkuExIefNefVVCzEkccVvFSoaQraIWgnveWgKybZPXholRHpJUdKVkpdRtiCXMhdOkbpNIEFXFVINPZlBERNXzzBAQjNStYInQjGeWiiykjLHyEBJCKrcsMVkjtbTGkGLYufBvjfjAAJkhUBiDEFgLWHgZFrWWfgapCcAaDVOnymMiQMNfiNfdCrQldHhez', generated_value=False, error_messages=['The name may not be greater than 255 characters.'], f_type=String(_sp_vals_positive=['s', '!@#$%^&*\\\\/{}[]', 'KiPZmhuSimKxrYWFAdAkTXbjGgdyCUROyGriLPdLiBVNVtOXNMjrnuLUnnYHvotPLdpHfrztwVjAbxQbSWZTaFnQtFQLrCihOyQCYtYWIuAFLVAKYBtGiqEdUzuNjDTORruDkxQQNRzjcFGmoCNAeCvBMFdVugqiprjMqSxwXZthSZMPxSlPhaiuhiOqJetafmDijzOrsqQKDSLgFiwoQJNljCPfWUiVUlTAEWiuXsoAjQFHQsXUuzbHsgWoyAS'], _sp_vals_negative=[...]), drop_key=False)})]" ]
}